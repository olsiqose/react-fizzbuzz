{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["BASE_URL","Form","state","text","errors","results","handleChange","e","_this","setState","target","value","renderErrors","map","error","index","renderSingleError","sendRequest","clearErrors","validateInput","axios","get","concat","then","response","data","fizzbuzz","catch","_this$state","resp","isNumber","parseInt","n","isNaN","react_default","a","createElement","key","Close_default","style","fontSize","document","body","backgroundColor","display","margin","width","padding","Paper_default","elevation","styles","paper","className","errorContainer","this","Typography_default","variant","component","typography","type","placeholder","onChange","input","name","textAreaStyle","disabled","rows","cols","submitButton","onClick","Component","borderRadius","letterSpacing","App","marginTop","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4ba6c80c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport axios from 'axios';\n\nconst BASE_URL = 'https://olsiqose.com/symfony-fizzbuzz/web';\n\nclass Form extends Component {\n\n    state = {\n        text: '',\n        errors: [],\n        results: []\n    };\n\n    handleChange = e => {\n        this.setState({text: e.target.value})\n    };\n\n    componentWillMount(){\n        document.body.style.backgroundColor = \"#ededee\";\n    }\n\n    renderErrors = () => {\n        const {errors} = this.state;\n        if(errors)\n            return errors.map( (error, index) => this.renderSingleError(error, index) );\n    };\n\n    sendRequest = () => {\n\n        //Clear errors\n        this.clearErrors();\n\n        if(!this.validateInput())\n            return;\n\n        const {text} = this.state;\n        axios.get(`${BASE_URL}/api/fizzbuzz?number=${text}`)\n            .then( response => this.setState({results: response.data.fizzbuzz}) )\n            .catch( error => this.setState({errors: ['Uups something went wrong']}));\n            \n    };\n\n    validateInput = () => {\n        const {text, errors} = this.state;\n        let resp = true;\n\n        if(text === ''){\n            this.setState({errors: ['Fill in the input']});\n            resp = false;\n        }\n        if(!this.isNumber(text)){\n            this.setState({errors: ['Value should be a number']});\n            resp = false;\n        }\n        if(parseInt(text) <= 0)\n        {\n            this.setState({errors: ['Value should be bigger than 0']});\n            resp = false;\n        }\n\n        return resp;\n\n    };\n     \n    isNumber = (n) =>  { \n        return !isNaN(parseInt(n)) && !isNaN(n - 0) \n    };\n\n    clearErrors = () => {\n        this.setState({errors: []});\n    };\n\n    renderSingleError = (error, index) => {\n        return (\n           <div key={index}>\n               <CloseIcon style={{fontSize: 12}} />\n               {error}\n               <br/>\n           </div>\n        )\n    };\n\n    render(){\n        return(\n            <div style={{ display: 'flex' }}>\n                <div style={{margin: 'auto', width: 550, padding:5}}>\n                    <Paper elevation={1} style={styles.paper}>\n                        <div className=\"error alert-danger\" style={styles.errorContainer}>\n                            {this.renderErrors()}\n                        </div>\n                        <Typography variant=\"headline\" component=\"h3\" style={styles.typography}>\n                            FizzBuzz.\n                        </Typography>\n                        <div>\n                            <div className=\"form-group\">\n                                <input className=\"form-control\"\n                                   type=\"text\"\n                                   placeholder=\"Please enter the number\"\n                                   onChange={this.handleChange}\n                                   value={this.state.input}\n                                   name=\"name\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <textarea \n                                    className=\"form-control\"\n                                    value={this.state.results}\n                                    style={styles.textAreaStyle}\n                                    disabled \n                                    rows=\"6\" \n                                    cols=\"50\">\n                                </textarea>\n                            </div>\n                            <div className=\"form-group\">\n                                <button className=\"btn btn-info\"\n                                    style={styles.submitButton}\n                                    onClick={this.sendRequest}\n                                >\n                                Submit\n                                </button>\n                            </div>\n                        </div>\n                    </Paper>\n                </div>\n            </div>\n            )\n    }\n}\n\n\nconst styles = {\n    paper: {\n        padding: 5\n    },\n    errorContainer: {\n        borderRadius: '0.2em', \n        fontSize:14\n    },\n    submitButton: {\n        width: '100%'\n    },\n    typography: {\n        padding: 5\n    },\n    textAreaStyle: {\n        letterSpacing: 2\n    }\n  };\n\n\nexport default Form;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './Form';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div style={{marginTop: 50}}>\n          <Form/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}